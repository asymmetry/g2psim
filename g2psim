#!/usr/bin/env python

import os, re, sys
import argparse as ap

class CustomHelpFormatter(ap.HelpFormatter):
    def _format_action_invocation(self, action):
        if not action.option_strings:
            metavar, = self._metavar_formatter(action, action.dest)(1)
            return metavar
        else:
            options = '' if len(action.option_strings[0]) == 2 else '    '
            options = options + ', '.join(action.option_strings)
            if action.nargs != 0:
                default = '=' + str(action.default) if action.default else ''
                if default == '' and action.const != '':
                    default = '=' + str(action.const)
                options = options + default
            return options

parser = ap.ArgumentParser(prog='g2psim', usage='%(prog)s [options]', formatter_class=CustomHelpFormatter)
parser.add_argument('-e', '--event', default=10000, type=int, help='number of event to simulate', dest='n')
parser.add_argument('-d', '--debug', default=1, help='set debug level', dest='debug')
parser.add_argument('-o', '--output', default='test.root', help='set output file name', dest='filename')
parser.add_argument('-c', '--config', default='defaults', help='set simulation configuration', dest='base')
parser.add_argument('--optics', action='store_true', help='simulate with optics data', dest='flag_optics')
parser.add_argument('-l', '--list', nargs='?', const='NAME', default=None, help='list all configurations or the content of one particular configuration', dest='list')

args = vars(parser.parse_args())

sys.path.append(os.getcwd())
import pyg2psim as sim

if args['list'] == 'NAME':
    clist = dir(sim.config_list)
    pat = re.compile(r'__.*__')
    for i in clist:
        if not pat.match(i) and isinstance(getattr(sim.config_list, i), dict):
            print(i)
    exit(0)
elif args['list']:
    if hasattr(sim.config_list, args['list']):
        sim.config.printf(getattr(sim.config_list, args['list']))
        exit(0)
    else:
        print('g2psim: error: unrecognized configurations: {0}\n'.format(args['base']))
        parser.print_help()
        exit(1)
del args['list']

if hasattr(sim.config_list, args['base']):
    args['base'] = getattr(sim.config_list, args['base'])
    if not args['flag_optics']:
        del args['flag_optics']
        sim.run(**args)
    else:
        del args['flag_optics']
        sim.optrun(**args)
else:
    print('g2psim: error: unrecognized configurations: {0}\n'.format(args['base']))
    parser.print_help()
    exit(1)
