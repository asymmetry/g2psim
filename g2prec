#!/usr/bin/env python

import os, re, shutil, sys
import argparse as ap
from array import array
from math import sin, cos, tan, acos, sqrt
from os.path import exists, join

class CustomHelpFormatter(ap.HelpFormatter):
    def _format_action_invocation(self, action):
        if not action.option_strings:
            metavar, = self._metavar_formatter(action, action.dest)(1)
            return metavar
        else:
            options = ''
            if len(action.option_strings[0]) > 2:
                options = '    '
            options += ', '.join(action.option_strings)
            return options

pwd = os.getcwd()
parser = ap.ArgumentParser(prog='g2prec', usage='%(prog)s [options] run', formatter_class=CustomHelpFormatter)
parser.add_argument('run', type=int, help='run number')
parser.add_argument('-b', '--bpmdir', type=str, default=None, help='set beam profile directory, only works with -s')
parser.add_argument('-d', '--dbdir', default=join(os.getcwd(), 'recdb'), help='set database directory (default: $PWD/dbdir)')
parser.add_argument('-l', '--level', type=int, default=1, help='set debug level (default: %(default)s)', dest='debug')
parser.add_argument('-r', '--rootdir', default=os.getcwd(), help='set rootfile directory (default: $PWD)')
parser.add_argument('-s', '--sepfile', action='store_true', help='store result to a separate rootfile', dest='sepfile_flag')

args = vars(parser.parse_args())

run, bpmdir, dbdir, debug, rootdir, sepfile_flag = [args[x] for x in ['run', 'bpmdir', 'dbdir', 'debug', 'rootdir', 'sepfile_flag']]
arm = 'L' if run < 20000 else 'R'

m = 0.938272046

import ROOT
if exists('pyg2psim') and exists('pyg2psim/libG2PSim.so') and exists('pyg2psim/libanalyzer.so'):
    ROOT.gSystem.Load('pyg2psim/libG2PSim.so')
    ROOT.gSystem.Load('pyg2psim/libanalyzer.so')
elif exists('libG2PSim.so') and exists('libanalyzer.so'):
    ROOT.gSystem.Load('libG2PSim.so')
    ROOT.gSystem.Load('libanalyzer.so')
else:
    print('The G2PSim or analyzer library does not exist!')
    exit(1)

rootfile = '{}/g2p_{}.root'.format(rootdir, run)
if not exists(rootfile):
    print('{} does not exist!'.format(rootfile))
    exit(1)
f, t, fout, tout = None, None, None, None
if sepfile_flag:
    f = True
    t = ROOT.TChain('T')
    t.Add(rootfile)
    for i in range(1, 20):
        if exists('{}/g2p_{}_{}.root'.format(rootdir, run, i)):
            t.Add('{}/g2p_{}_{}.root'.format(rootdir, run, i))
    if bpmdir != None:
        t.AddFriend('T', '{}/bpm_{}.root'.format(bpmdir, run))
    fout = ROOT.TFile('{}/optics_{}.root'.format(rootdir, run), 'RECREATE')
    tout = ROOT.TTree('T', 'reconstructed kinematics tree')
else:
    shutil.copy2(rootfile, '{}/g2p_{}.bak.root'.format(rootdir, run))
    f = ROOT.TFile(rootfile, 'UPDATE')
    t = f.Get('T')
    tout = t

ROOT.gG2PRun = ROOT.G2PRun()
ROOT.gG2PRun.SetDebugLevel(debug)

t.GetEntry(0)
time = int(getattr(t, 'Event_Branch').GetHeader().GetEvtTime()/1.0e6)
timelist = [int(x) for x in os.listdir(dbdir) if str.isdigit(x)]
timelist.sort()
dbtime = [x for x in timelist if x < time][-1]
dbfile = join(dbdir, str(dbtime), 'db_{}.optics.cfg'.format(arm))
print('Use {}'.format(dbfile))
if not exists(dbfile):
    print('{} does not exist!'.format(dbfile))
    exit(1)
ROOT.gG2PRun.SetConfigFile(dbfile)

e, p, pol = -1, -1, +1
rundbfile = join(dbdir, 'db_rec.dat')
with open(rundbfile, 'r') as fi:
    for line in fi:
        if line.startswith(str(run)):
            _, p, e, pol = [float(x) for x in line.strip().split()]
            pol = int(pol)
            break
if e != -1 and p != -1:
    ROOT.gG2PRun.SetBeamEnergy(e)
    ROOT.gG2PRun.SetHRSMomentum(p)
else:
    print('db_rec.dat do not have settings for run {}!'.format(run))
    exit(1)

rec = ROOT.G2PRec()
ROOT.gG2PApps.Add(rec)

ROOT.gG2PRun.Begin()
for a in ROOT.gG2PApps:
    if a.IsZombie():
        ROOT.gG2PApps.Remove(a)
        continue
    if not a.IsInit():
        if a.Begin() != 0:
            print('{} cannot be initialized.'.format(a.GetName()))
            exit(1)
if debug > 0:
    ROOT.gG2PRun.Print()
print('Ready to go!')

bpmvars, bpmz = None, 0
gep = False
if t.FindBranch('{}rb.tgt_m13_x'.format(arm)):
    bpmvars = [x.format(arm) for x in ['{}rb.tgt_m13_x', '{}rb.tgt_m13_theta', '{}rb.tgt_m13_y', '{}rb.tgt_m13_phi']]
    bpmz = -13.6271e-3
elif t.FindBranch('{}rb.tgt_m12_x'.format(arm)):
    bpmvars = [x.format(arm) for x in ['{}rb.tgt_m12_x', '{}rb.tgt_m12_theta', '{}rb.tgt_m12_y', '{}rb.tgt_m12_phi']]
    bpmz = -12.5476e-3
elif t.FindBranch('{}rb.tgt_m10_x'.format(arm)):
    bpmvars = [x.format(arm) for x in ['{}rb.tgt_m10_x', '{}rb.tgt_m10_theta', '{}rb.tgt_m10_y', '{}rb.tgt_m10_phi']]
    bpmz = -10.81e-3
elif t.FindBranch('{}rb.tgt_0_x'.format(arm)):
    bpmvars = [x.format(arm) for x in ['{}rb.tgt_0_x', '{}rb.tgt_0_theta', '{}rb.tgt_0_y', '{}rb.tgt_0_phi']]
#elif not t.FindBranch('{}rb.bpmavail'.format(arm)):
#    gep = True
else:
    print('Could not find beam information.')
    exit(1)
bpmavailvar = '{}rb.bpmavail'.format(arm)
tpmatvars = [x.format(arm) for x in ['{}.gold.x', '{}.gold.th', '{}.gold.y', '{}.gold.ph', '{}.gold.dp']]

def cross(A, B):
    return [A[1] * B[2] - A[2] * B[1], A[2] * B[0] - A[0] * B[2], A[0] * B[1] - A[1] * B[0]]

def calkins(bpm, rec, d):
    ep = p * (1 + d)
    nu = e / 1000.0 - ep

    A = [tan(bpm[3]), tan(bpm[1]), 1]
    B = [sin(rec[1]) * cos(rec[3]), sin(rec[1]) * sin(rec[3]), cos(rec[1])]
    C = [pol, 0, 0]

    try:
        scatang = acos((A[0] * B[0] + A[1] * B[1] + A[2] * B[2]) / sqrt((A[0]**2 + A[1]**2 + A[2]**2) * (B[0]**2 + B[1]**2 + B[2]**2)))
    except ValueError:
        scatang = 0.0
        print A, B

    q2 = 4 * e * ep * sin(scatang / 2)**2
    w2 = m**2 + 2 * m * nu - q2

    D = cross(A, B)
    E = cross(A, C)
    try:
        fieldang = acos((D[0] * E[0] + D[1] * E[1] + D[2] * E[2]) / sqrt((D[0]**2 + D[1]**2 + D[2]**2) * (E[0]**2 + E[1]**2 + E[2]**2)))
    except ValueError:
        fieldang = 0.0
        print D, E

    return [nu, scatang, q2, w2, fieldang]

inc = 0
while f:
    if not sepfile_flag:
        print('Opening existed rootfile {}'.format(rootfile))

    recvars = [(x.format(arm), array('d', [0])) for x in ['{}.rec.x', '{}.rec.th', '{}.rec.y', '{}.rec.ph', '{}.rec.dp']]
    reclvars = [(x.format(arm), array('d', [0])) for x in ['{}.rec.l_x', '{}.rec.l_th', '{}.rec.l_y', '{}.rec.l_ph', '{}.rec.l_z']]
    kinvars = [(x.format(arm), array('d', [0])) for x in ['{}.kin.nu', '{}.kin.scatang', '{}.kin.q2', '{}.kin.w2', '{}.kin.fieldang']]
    def removevars(lv):
        for i in lv:
            rb = t.GetBranch(i[0])
            rl = t.GetLeaf(i[0])
            if rl:
                t.GetListOfLeaves().Remove(rl)
                t.GetListOfLeaves().Compress()
            if rb:
                t.GetListOfBranches().Remove(rb)
                t.GetListOfBranches().Compress()
    if not sepfile_flag:
        map(removevars, [recvars, reclvars, kinvars])
    newbranch = []
    def addvars(lv):
        for i in lv:
            newbranch.append(tout.Branch(i[0], i[1], i[0] + '/D'))
    map(addvars, [recvars, reclvars, kinvars])

    n = t.GetEntries()
    for i in range(n):
        t.GetEntry(i)
        evnum = getattr(t, 'Event_Branch').GetHeader().GetEvtNum()
        if debug > 1:
            print('Processing event {} ......'.format(evnum))
        elif i % 10000 == 0 and i != 0:
            print('{} event processed ......'.format(i))

        bpmavail = 1
        bpm_bpm = [0] * 5
        if not gep:
            bpmavail = getattr(t, bpmavailvar)
            bpm_bpm = [getattr(t, x) for x in bpmvars]
            bpm_bpm[0] /= 1000
            bpm_bpm[2] /= 1000
            bpm_bpm.append(bpmz)
        tpmat_tr = [getattr(t, x) for x in tpmatvars]

        rec_tr = array('d', [1e38] * 5)
        rec_lab = array('d', [1e38] * 5)
        kins = array('d', [1e38] * 5)
        if bpmavail > 0.5 and all(x < 1e10 for x in tpmat_tr):
            rec.Process(array('d', bpm_bpm), array('d', tpmat_tr), rec_tr, rec_lab)
            if all(x < 1e37 for x in rec_tr):
                rec_tr[1] = tan(rec_tr[1])
                rec_tr[3] = tan(rec_tr[3])
                kins = calkins(bpm_bpm, rec_lab, rec_tr[4])
        def arraytodata(adp):
            for i, j in enumerate(adp[0]):
                j[1][0] = adp[1][i]
        map(arraytodata, [(recvars, rec_tr), (reclvars, rec_lab), (kinvars, kins)])

        if sepfile_flag:
            tout.Fill()
        else:
            for i in newbranch:
                i.Fill()

    tout.Write('', ROOT.TObject.kOverwrite)

    if sepfile_flag:
        fout.Close()
        f = False
    else:
        f.Close()
        inc += 1
        rootfile = '{}/g2p_{}_{}.root'.format(rootdir, run, inc)
        if exists(rootfile):
            shutil.copy2(rootfile, '{}/g2p_{}_{}.bak.root'.format(rootdir, run, inc))
            f = ROOT.TFile(rootfile, 'UPDATE')
            t = f.Get('T')
            tout = t
        else:
            f = None

for a in ROOT.gG2PApps:
    a.End()
if debug > 0:
    print('Run finished!')

exit(0)
