#!/usr/bin/env python

import ctypes, os, re, sys
import argparse as ap
from array import array
from math import tan
from os.path import exists, join

class CustomHelpFormatter(ap.HelpFormatter):
    def _format_action_invocation(self, action):
        if not action.option_strings:
            metavar, = self._metavar_formatter(action, action.dest)(1)
            return metavar
        else:
            options = ''
            if len(action.option_strings[0]) > 2:
                options = '    '
            options = options + ', '.join(action.option_strings)
            return options

pwd = os.getcwd()
parser = ap.ArgumentParser(prog='g2prec', usage='%(prog)s [options] run', formatter_class=CustomHelpFormatter)
parser.add_argument('run', type=int, help='run number')
parser.add_argument('-b', '--bpmdir', type=str, default=None, help='set beam profile directory, only works with -s')
parser.add_argument('-d', '--dbdir', default=join(os.getcwd(), 'recdb'), help='set database directory (default: $PWD/dbdir)')
parser.add_argument('-l', '--level', type=int, default=1, help='set debug level (default: %(default)s)', dest='debug')
parser.add_argument('-r', '--rootdir', default=os.getcwd(), help='set rootfile directory (default: $PWD)')
parser.add_argument('-s', '--sepfile', action='store_true', help='store result to a separate rootfile', dest='sepfile_flag')

args = vars(parser.parse_args())

bpmdir = args['bpmdir']
dbdir = args['dbdir']
debug = args['debug']
rootdir = args['rootdir']
sepfile_flag = args['sepfile_flag']
run = args['run']
arm = 'L' if run < 20000 else 'R'

import ROOT
if exists('pyg2psim') and exists('pyg2psim/libG2PSim.so') and exists('pyg2psim/libanalyzer.so'):
    ROOT.gSystem.Load('pyg2psim/libG2PSim.so')
    ROOT.gSystem.Load('pyg2psim/libanalyzer.so')
elif exists('libG2PSim.so') and exists('libanalyzer.so'):
    ROOT.gSystem.Load('libG2PSim.so')
    ROOT.gSystem.Load('libanalyzer.so')
else:
    print('The G2PSim or analyzer library does not exist!')
    exit(1)

rootfile = '{0}/g2p_{1}.root'.format(rootdir, run)
if not exists(rootfile):
    print('{0} does not exist!'.format(rootfile))
    exit(1)
f = None
t = None
fout = None
tout = None
if sepfile_flag:
    f = True
    t = ROOT.TChain('T')
    t.Add(rootfile)
    for i in range(1, 20):
        if exists('{0}/g2p_{1}_{2}.root'.format(rootdir, run, i)):
            t.Add('{0}/g2p_{1}_{2}.root'.format(rootdir, run, i))
    if bpmdir != None:
        t.AddFriend('T', '{0}/bpm_{1}.root'.format(bpmdir, run))
    fout = ROOT.TFile('{0}/optics_{1}.root'.format(rootdir, run), 'RECREATE')
    tout = ROOT.TTree('T', 'reconstructed kinematics tree')
else:
    f = ROOT.TFile(rootfile, 'UPDATE')
    t = f.Get('T')
    tout = t

ROOT.gG2PRun = ROOT.G2PRun()
ROOT.gG2PRun.SetDebugLevel(debug)

t.GetEntry(0)
time = int(getattr(t, 'Event_Branch').GetHeader().GetEvtTime()/1.0e6)
timelist = [int(x) for x in os.listdir(dbdir) if str.isdigit(x)]
timelist.sort()
dbtime = [x for x in timelist if x < time][-1]
dbfile = join(dbdir, str(dbtime), 'db_{0}.optics.cfg'.format(arm))
print('Use {0}'.format(dbfile))
if not exists(dbfile):
    print('{0} does not exist!'.format(dbfile))
    exit(1)
ROOT.gG2PRun.SetConfigFile(dbfile)

ep = [-1, -1]
rundbfile = join(dbdir, 'db_rec.dat')
with open(rundbfile, 'r') as fi:
    for line in fi:
        if line.startswith(str(run)):
            ep = map(float, line.strip().split())[1:3]
            break
if ep[0] != -1.0:
    ROOT.gG2PRun.SetBeamEnergy(ep[1])
    ROOT.gG2PRun.SetHRSMomentum(ep[0])
else:
    print('db_rec.dat do not have settings for run {0}!'.format(run))
    exit(1)

rec = ROOT.G2PRec()
ROOT.gG2PApps.Add(rec)

ROOT.gG2PRun.Begin()
for a in ROOT.gG2PApps:
    if a.IsZombie():
        ROOT.gG2PApps.Remove(a)
        continue
    if not a.IsInit():
        if a.Begin() != 0:
            print('{} cannot be initialized.'.format(a.GetName()))
            exit(1)
if debug > 0:
    ROOT.gG2PRun.Print()
print('Ready to go!')

bpmvars = None
bpmz = 0
gep = False
if t.FindBranch('{0}rb.tgt_m13_x'.format(arm)):
    bpmvars = [x.format(arm) for x in ['{0}rb.tgt_m13_x', '{0}rb.tgt_m13_theta', '{0}rb.tgt_m13_y', '{0}rb.tgt_m13_phi']]
    bpmz = -13.6271e-3
elif t.FindBranch('{0}rb.tgt_m12_x'.format(arm)):
    bpmvars = [x.format(arm) for x in ['{0}rb.tgt_m12_x', '{0}rb.tgt_m12_theta', '{0}rb.tgt_m12_y', '{0}rb.tgt_m12_phi']]
    bpmz = -12.5476e-3
elif t.FindBranch('{0}rb.tgt_m10_x'.format(arm)):
    bpmvars = [x.format(arm) for x in ['{0}rb.tgt_m10_x', '{0}rb.tgt_m10_theta', '{0}rb.tgt_m10_y', '{0}rb.tgt_m10_phi']]
    bpmz = -10.81e-3
elif t.FindBranch('{0}rb.tgt_0_x'.format(arm)):
    bpmvars = [x.format(arm) for x in ['{0}rb.tgt_0_x', '{0}rb.tgt_0_theta', '{0}rb.tgt_0_y', '{0}rb.tgt_0_phi']]
elif not t.FindBranch('{0}rb.bpmavail'.format(arm)):
    gep = True
else:
    print('Could not find beam information.')
    exit(1)
bpmavailvar = '{0}rb.bpmavail'.format(arm)
tpmatvars = [x.format(arm) for x in ['{0}.gold.x', '{0}.gold.th', '{0}.gold.y', '{0}.gold.ph', '{0}.gold.dp']]

inc = 0
while f:
    if not sepfile_flag:
        print('Opening existed rootfile {0}'.format(rootfile))
        
    #tpcorrvars = [x.format(arm) for x in ['{0}.cor.x', '{0}.cor.th', '{0}.cor.y', '{0}.cor.ph', '{0}.cor.dp']]
    #tpcorrdata = [array('d', [0]) for x in range(5)]
    recvars = [x.format(arm) for x in ['{0}.rec.x', '{0}.rec.th', '{0}.rec.y', '{0}.rec.ph', '{0}.rec.dp']]
    recdata = [array('d', [0]) for x in range(5)]
    reclvars = [x.format(arm) for x in ['{0}.rec.l_x', '{0}.rec.l_th', '{0}.rec.l_y', '{0}.rec.l_ph', '{0}.rec.l_z']]
    recldata = [array('d', [0]) for x in range(5)]
    newbranch = []
    def addvars(n, d):
        for i in range(len(n)):
            newbranch.append(tout.Branch(n[i], d[i], n[i] + '/D'))
    #addvars(tpcorrvars, tpcorrdata)
    addvars(recvars, recdata)
    addvars(reclvars, recldata)

    n = t.GetEntries()
    for i in range(n):
        t.GetEntry(i)
        evnum = getattr(t, 'Event_Branch').GetHeader().GetEvtNum()
        if debug > 1:
            print('Processing event {0} ......'.format(evnum))
        elif i % 10000 == 0 and i != 0:
            print('{0} event processed ......'.format(i))

        bpmavail = 1
        bpm_bpm = [0] * 5
        if not gep:
            bpmavail = getattr(t, bpmavailvar)
            bpm_bpm = [getattr(t, x) for x in bpmvars]
            bpm_bpm[0] /= 1000
            bpm_bpm[2] /= 1000
            bpm_bpm.append(bpmz)
        tpmat_tr = [getattr(t, x) for x in tpmatvars]

        tpcorr_tr = array('d', [1e38] * 5)
        sieveproj_tr = array('d', [1e38] * 5)
        rec_tr = array('d', [1e38] * 5)
        rec_lab = array('d', [1e38] * 5)
        if bpmavail < 0.5 or any(x > 1e8 for x in tpmat_tr):
            if debug > 2:
                print('{0:1d}'.format(bpmavail) + ' '.join(['{0:10.3e}'.format(x) for x in tpmat_tr]))
        else:
            rec.Process(array('d', bpm_bpm), array('d', tpmat_tr), tpcorr_tr, sieveproj_tr, rec_tr, rec_lab)
            def arraytodata(a, d):
                for i in range(len(d)):
                    d[i][0] = a[i]
            def totan(l):
                if all(x < 1e37 for x in l):
                    l[1] = tan(l[1])
                    l[3] = tan(l[3])         
            map(totan, [tpcorr_tr, sieveproj_tr, rec_tr])
            arraytodata(rec_tr, recdata)
            arraytodata(rec_lab, recldata)

        if sepfile_flag:
            tout.Fill()
        else:
            for i in newbranch:
                i.Fill()

    tout.Write('', ROOT.TObject.kOverwrite)

    if sepfile_flag:
        fout.Close()
        f = False
    else:
        f.Close()
        inc += 1
        rootfile = '{0}/g2p_{1}_{2}.root'.format(rootdir, run, inc)
        if exists(rootfile):
            f = ROOT.TFile(rootfile, 'UPDATE')
        else:
            f = None

for a in ROOT.gG2PApps:
    a.End()
if debug > 0:
    print('Run finished!')

exit(0)
